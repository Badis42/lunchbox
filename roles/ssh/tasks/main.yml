---
# Manage SSH for users with different trust level.
# this role assumes a folder structure with ssh_pub_keys named after usernames.
# - files
#    - non_users
#         hank
#    - sftp_users
#         karen
#    - ssh_users
#         vagrant

- name: 'ensure ansible_user is defined in group_vars'
  assert:
    that: "'{{ ansible_user }}' is defined"
  tags:
    - ssh

- name: 'ensure package openssh-clients is present'
  yum:
    name: openssh-clients
    state: present
  tags:
    - ssh

- name: 'ensure package openssh-server is latest'
  yum:
    name: openssh-server
    state: latest
  notify:
    - restart sshd
  tags:
    - ssh
    - skip_ansible_lint # sshd is security critical

- name: 'verify if ecdsa host key is present'
  stat:
    path: /etc/ssh/ssh_host_ecdsa_key
  register: ssh_host_ecdsa_key

- name: 'generate a host key for sshd'
  command: ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N ''
  when: not ssh_host_ecdsa_key.stat.exists

- name: 'create central directory for authorized_keys'
  file:
    dest: /etc/ssh/authorized_keys
    state: directory
    owner: root
    group: root
    mode: 0755
  notify:
    - restart sshd
  tags:
    - ssh

- name: 'create a group for users without ssh'
  group:
    name: nossh
    gid: 111
    state: present
  notify:
    - restart sshd
  tags:
    - ssh

- name: 'unlock central authorized_keys files for writing'
  command: chattr -i /etc/ssh/authorized_keys/{{ item }}
  with_fileglob:
    - /etc/ssh/authorized_keys//*
  changed_when: yes
  ignore_errors: yes
  tags:
    - ssh

- name: 'install all authorized keys from the directory ansible_user'
  authorized_key:
    path: /etc/ssh/authorized_keys/{{ ansible_user }}
    key: "{{ lookup('file', item) }}"
    user: "{{ ansible_user }}"
    manage_dir: no
    state: present
  with_fileglob:
    - ansible_user/*
  notify:
    - restart sshd
  tags:
    - ssh

- name: 'ensure all ssh_users have a user'
  user:
    name: "{{ item|basename }}"
    shell: /bin/bash
    state: present
  with_fileglob:
    - ssh_users/*
  tags:
    - ssh

- name: 'install all authorized keys from the directory ssh_users'
  authorized_key:
    path: /etc/ssh/authorized_keys/{{ item|basename }}
    key: "{{ lookup('file', item) }}"
    user: "{{ item|basename }}"
    manage_dir: no
    state: present
  with_fileglob:
    - ssh_users/*
  notify:
    - restart sshd
  tags:
    - ssh

- name: 'create sftp group for chrooted users'
  group:
    name: sftp
    gid: 2003
    state: present
  notify:
    - restart sshd
  tags:
    - ssh

- name: 'create the sftp user in the sftp group'
  user:
    name: "{{ item|basename }}"
    group: sftp
    shell: "/bin/false"
    home: "/home/{{ item|basename }}"
    createhome: yes
    state: present
  with_fileglob:
    - sftp_users/*
  tags:
    - ssh

- name: 'set permissions on homedir'
  file:
    dest: "/home/{{ item|basename }}"
    owner: root
    group: root
    mode: 0755
  with_fileglob:
    - sftp_users/*
  tags:
    - ssh

- name: 'ensure dir for files exists'
  file:
    dest: "/home/{{ item|basename }}/files"
    state: directory
    owner: "{{ item|basename }}"
    group: users
    mode: 02775
  with_fileglob:
    - sftp_users/*
  tags:
    - ssh

- name: 'install all authorized keys from the directory sftp_users'
  authorized_key:
    path: "/etc/ssh/authorized_keys/{{ item|basename }}"
    key: "{{ lookup('file', item) }}"
    user: "{{ item|basename }}"
    manage_dir: no
    state: present
  with_fileglob:
    - sftp_users/*
  tags:
    - ssh

- name: 'ensure all non_users are removed'
  user:
    name: "{{ item|basename }}"
    state: absent
    remove: yes
  with_fileglob:
    - non_users/*
  tags:
    - ssh

- name: 'ensure all keys of non_users are removed'
  file:
    dest: "/etc/ssh/authorized_keys/{{ item|basename }}"
    state: absent
  with_fileglob:
    - non_users/*
  tags:
    - ssh

- name: 'lock central authorized_keys files for writing'
  command: chattr +i /etc/ssh/authorized_keys/{{ item }}
  with_fileglob:
    - /etc/ssh/authorized_keys//*
  changed_when: yes
  tags:
    - ssh

- name: 'build and write /etc/ssh/ssh_config file'
  template:
    src: ssh_config.j2
    dest: /etc/ssh/ssh_config
    owner: root
    group: root
    mode: 0644
  notify:
    - restart sshd
  tags:
    - ssh

- name: 'build and write /etc/ssh/sshd_config file'
  template:
    src: sshd_config.j2
    dest: /etc/ssh/sshd_config
    owner: root
    group: root
    mode: 0644
  tags:
    - ssh

- name: 'restart sshd'
  service:
    name: sshd
    state: restarted
  tags:
    - ssh

- name: 'ensure no user has authorized_keys in their homedir'
  shell: rm -f /home/*/.ssh/authorized_keys*
  tags:
    - ssh
    - skip_ansible_lint # with_fileglob cannot match directories

- name: 'deny interactive shell for ansible_user'
  copy:
    src: bash_profile
    dest: "/home/{{ansible_user}}/.bash_profile"
